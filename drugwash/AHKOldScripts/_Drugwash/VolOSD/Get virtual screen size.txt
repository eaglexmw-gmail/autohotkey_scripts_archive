; get screen size from virtual screen 
    Sysget, ScreenWidth, 78 
    Sysget, ScreenHeight, 79 

Functions:
-EnumDisplayMonitors Enumerates display monitors that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. 
-GetMonitorInfo Retrieves information about a display monitor. 
-MonitorEnumProc An application-defined callback function that is called by the EnumDisplayMonitors function. 
-MonitorFromPoint Retrieves a handle to the display monitor that contains a specified point. 
-MonitorFromRect Retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle. 
-MonitorFromWindow Retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window. 

Structures:
The MONITORINFO structure contains information about a display monitor.

The GetMonitorInfo function stores information in a MONITORINFO structure or a MONITORINFOEX structure.

The MONITORINFO structure is a subset of the MONITORINFOEX structure. The MONITORINFOEX structure adds a string member to contain a name for the display monitor. 

 
typedef struct tagMONITORINFO {
  DWORD  cbSize; 
  RECT   rcMonitor; 
  RECT   rcWork; 
  DWORD  dwFlags; 
} MONITORINFO, *LPMONITORINFO;  

Members
cbSize 
The size of the structure, in bytes. 
Set the cbSize member to sizeof(MONITORINFO) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it. 

rcMonitor 
A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values. 
rcWork 
A RECT structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values. 
dwFlags 
A set of flags that represent attributes of the display monitor. 
The following flag is defined. 

Value Meaning 
MONITORINFOF_PRIMARY This is the primary display monitor. 

Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
---------------------
The MONITORINFOEX structure contains information about a display monitor.

The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.

The MONITORINFOEX structure is a superset of the MONITORINFO structure. The MONITORINFOEX structure adds a string member to contain a name for the display monitor. 

 
typedef struct tagMONITORINFOEX {  
  DWORD  cbSize; 
  RECT   rcMonitor; 
  RECT   rcWork; 
  DWORD  dwFlags; 
  TCHAR  szDevice[CCHDEVICENAME];
} MONITORINFOEX, *LPMONITORINFOEX;  

Members
cbSize 
The size, in bytes, of the structure. 
Set the cbSize member to sizeof(MONITORINFOEX) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it. 

rcMonitor 
A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values. 
rcWork 
A RECT structure that specifies the work area rectangle of the display monitor that can be used by applications, expressed in virtual-screen coordinates. Windows uses this rectangle to maximize an application on the monitor. The rest of the area in rcMonitor contains system windows such as the task bar and side bars. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values. 
dwFlags 
Specifies attributes of the display monitor. 
This member can be the following value. 

Value Meaning 
MONITORINFOF_PRIMARY This is the primary display monitor. 


szDevice 
A string that specifies the device name of the monitor being used.  Most applications have no use for a display monitor name, and so can save some bytes by using a MONITORINFO structure. 

Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
  Unicode: Declared as Unicode and ANSI structures.
------------------------------
The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle. 

 
typedef struct _RECT { 
  LONG left; 
  LONG top; 
  LONG right; 
  LONG bottom; 
} RECT, *PRECT;  

Members
left 
Specifies the x-coordinate of the upper-left corner of the rectangle. 
top 
Specifies the y-coordinate of the upper-left corner of the rectangle. 
right 
Specifies the x-coordinate of the lower-right corner of the rectangle. 
bottom 
Specifies the y-coordinate of the lower-right corner of the rectangle. 
Remarks
By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel whose coordinates are (right, bottom) lies immediately outside of the the rectangle. For example, when RECT is passed to the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. This structure is identical to the RECTL structure.

Windows 95/98/Me: Included in Windows 95 and later.
  Header: Declared in Windef.h; include Windows.h.
-------------------------------------------------
The GetMonitorInfo function retrieves information about a display monitor. 

 
BOOL GetMonitorInfo(
  HMONITOR hMonitor,  // handle to display monitor
  LPMONITORINFO lpmi  // display monitor information
); 

Parameters
hMonitor 
[in] Handle to the display monitor of interest. 
lpmi 
[out] Pointer to a MONITORINFO or MONITORINFOEX structure that receives information about the specified display monitor. 
You must set the cbSize member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it. 

The MONITORINFOEX structure is a superset of the MONITORINFO structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a MONITORINFO structure. 

Return Values
If the function succeeds, the return value is nonzero.

If the function fails, the return value is zero. 

Remarks
Windows 98/Me: GetMonitorInfoW is supported by the Microsoft Layer for Unicode. To use this version, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.

Windows NT/2000/XP/Vista: Included in Windows 2000 and later.
  Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
  Library: Use User32.lib.
  Unicode: Implemented as Unicode and ANSI versions on Windows 2000/XP. Also supported by Microsoft Layer for Unicode.
------------------------------------
The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point. 

 
HMONITOR MonitorFromPoint(
  POINT pt,      // point 
  DWORD dwFlags  // determine return value
); 

Parameters
pt 
[in] A POINT structure that specifies the point of interest in virtual-screen coordinates. 
dwFlags 
[in] Determines the function's return value if the point is not contained within any display monitor. 
This parameter can be one of the following values. 

Value Meaning 
MONITOR_DEFAULTTONEAREST Returns a handle to the display monitor that is nearest to the point.  
MONITOR_DEFAULTTONULL Returns NULL.  
MONITOR_DEFAULTTOPRIMARY Returns a handle to the primary display monitor.  


Return Values
If the point is contained by a display monitor, the return value is an HMONITOR handle to that display monitor.

If the point is not contained by a display monitor, the return value depends on the value of dwFlags. 

Requirements 
  Windows NT/2000/XP/Vista: Included in Windows 2000 and later.
  Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
  Library: Use User32.lib.
--------------------------------
The POINT structure defines the x- and y- coordinates of a point. 

 
typedef struct tagPOINT { 
  LONG x; 
  LONG y; 
} POINT, *PPOINT;  

Members
x 
Specifies the x-coordinate of the point. 
y 
Specifies the y-coordinate of the point. 
Requirements 
  Windows NT/2000/XP/Vista: Included in Windows NT 3.1 and later.
  Windows 95/98/Me: Included in Windows 95 and later.
  Header: Declared in Windef.h; include Windows.h.
------------------------------------
The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window. 

 
HMONITOR MonitorFromWindow(
  HWND hwnd,       // handle to a window 
  DWORD dwFlags    // determine return value 
); 

Parameters
hwnd 
[in] Handle to the window of interest. 
dwFlags 
[in] Determines the function's return value if the window does not intersect any display monitor. 
This parameter can be one of the following values. 

Value Meaning 
MONITOR_DEFAULTTONEAREST Returns a handle to the display monitor that is nearest to the window.  
MONITOR_DEFAULTTONULL Returns NULL.  
MONITOR_DEFAULTTOPRIMARY Returns a handle to the primary display monitor.  


Return Values
If the window intersects one or more display monitor rectangles, the return value is an HMONITOR handle to the display monitor that has the largest area of intersection with the window.

If the window does not intersect a display monitor, the return value depends on the value of dwFlags. 

Remarks
If the window is currently minimized, MonitorFromWindow uses the rectangle of the window before it was minimized.

Requirements 
  Windows NT/2000/XP/Vista: Included in Windows 2000 and later.
  Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
  Library: Use User32.lib.
-----------------------------
The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics(SM_CMONITORS) counts only the display monitors.

 
BOOL EnumDisplayMonitors(
  HDC hdc,                   // handle to display DC 
  LPCRECT lprcClip,          // clipping rectangle 
  MONITORENUMPROC lpfnEnum,  // callback function
  LPARAM dwData              // data for callback function 
); 

Parameters
hdc 
[in] Handle to a display device context that defines the visible region of interest. 
If this parameter is NULL, the hdcMonitor parameter passed to the callback function will be NULL, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop. 

lprcClip 
[in] Pointer to a RECT structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by hdc. 
If hdc is non-NULL, the coordinates of the clipping rectangle are relative to the origin of the hdc. If hdc is NULL, the coordinates are virtual-screen coordinates. 

This parameter can be NULL if you don't want to clip the region specified by hdc. 

lpfnEnum 
[in] Pointer to a MonitorEnumProc application-defined callback function. 
dwData 
[in] Application-defined data that EnumDisplayMonitors passes directly to the MonitorEnumProc function. 
Return Values
If the function succeeds, the return value is nonzero.

If the function fails, the return value is zero. 

Remarks
There are two reasons to call the EnumDisplayMonitors function: 

You want to draw optimally into a device context that spans several display monitors, and the monitors have different color formats. 
You want to obtain a handle and position rectangle for one or more display monitors. 
To determine whether all the display monitors in a system share the same color format, call GetSystemMetrics(SM_SAMEDISPLAYFORMAT). 

You do not need to use the EnumDisplayMonitors function when a window spans display monitors that have different color formats. You can continue to paint under the assumption that the entire screen has the color properties of the primary monitor. Your windows will look fine. EnumDisplayMonitors just lets you make them look better.

Setting the hdc parameter to NULL lets you use the EnumDisplayMonitors function to obtain a handle and position rectangle for one or more display monitors. The following table shows how the four combinations of NULL and non-NULL hdc and lprcClip values affect the behavior of the EnumDisplayMonitors function.

hdc lprcRect EnumDisplayMonitors behavior 
NULL NULL Enumerates all display monitors. 
The callback function receives a NULL HDC. 
 
NULL non-NULL Enumerates all display monitors that intersect the clipping rectangle. Use virtual screen coordinates for the clipping rectangle. 
The callback function receives a NULL HDC. 
 
non-NULL NULL Enumerates all display monitors that intersect the visible region of the device context. 
The callback function receives a handle to a DC for the specific display monitor.
 
non-NULL non-NULL Enumerates all display monitors that intersect the visible region of the device context and the clipping rectangle. Use device context coordinates for the clipping rectangle. 
The callback function receives a handle to a DC for the specific display monitor.
 


Example Code
To paint in response to a WM_PAINT message, using the capabilities of each monitor, you can use code like this in a window procedure: 

case WM_PAINT:
  hdc = BeginPaint(hwnd, &ps);
  EnumDisplayMonitors(hdc, NULL, MyPaintEnumProc, 0);
  EndPaint(hwnd, &ps);To paint the top half of a window using the capabilities of each monitor, you can use code like this:

GetClientRect(hwnd, &rc);
rc.bottom = (rc.bottom - rc.top) / 2;
hdc = GetDC(hwnd);
EnumDisplayMonitors(hdc, &rc, MyPaintEnumProc, 0);
ReleaseDC(hwnd, hdc);To paint the entire virtual screen optimally for each display monitor, you can use code like this:

hdc = GetDC(NULL);
EnumDisplayMonitors(hdc, NULL, MyPaintScreenEnumProc, 0);
ReleaseDC(NULL, hdc);To retrieve information about all of the display monitors, use code like this:

EnumDisplayMonitors(NULL, NULL, MyInfoEnumProc, 0);
Requirements 
  Windows NT/2000/XP/Vista: Included in Windows 2000 and later.
  Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
  Library: Use User32.lib.
--------------------------------
A MonitorEnumProc function is an application-defined callback function that is called by the EnumDisplayMonitors function. 

A value of type MONITORENUMPROC is a pointer to a MonitorEnumProc function.

 
BOOL CALLBACK MonitorEnumProc(
  HMONITOR hMonitor,  // handle to display monitor
  HDC hdcMonitor,     // handle to monitor DC
  LPRECT lprcMonitor, // monitor intersection rectangle
  LPARAM dwData       // data
); 

Parameters
hMonitor 
[in] Handle to the display monitor. This value will always be non-NULL. 
hdcMonitor 
[in] Handle to a device context. 
The device context has color attributes that are appropriate for the display monitor identified by hMonitor. The clipping area of the device context is set to the intersection of the visible region of the device context identified by the hdc parameter of EnumDisplayMonitors, the rectangle pointed to by the lprcClip parameter of EnumDisplayMonitors, and the display monitor rectangle. 

This value is NULL if the hdc parameter of EnumDisplayMonitors was NULL. 

lprcMonitor 
[in] Pointer to a RECT structure. 
If hdcMonitor is non-NULL, this rectangle is the intersection of the clipping area of the device context identified by hdcMonitor and the display monitor rectangle. The rectangle coordinates are device-context coordinates. 

If hdcMonitor is NULL, this rectangle is the display monitor rectangle. The rectangle coordinates are virtual-screen coordinates. 

dwData 
[in] Application-defined data that EnumDisplayMonitors passes directly to the enumeration function. 
Return Values
To continue the enumeration, return TRUE.

To stop the enumeration, return FALSE.

Remarks
You can use the EnumDisplayMonitors function to enumerate the set of display monitors that intersect the visible region of a specified device context and, optionally, a clipping rectangle. To do this, set the hdc parameter to a non-NULL value, and set the lprcClip parameter as needed. 

You can also use the EnumDisplayMonitors function to enumerate one or more of the display monitors on the desktop, without supplying a device context. To do this, set the hdc parameter of EnumDisplayMonitors to NULL and set the lprcClip parameter as needed. 

In all cases, EnumDisplayMonitors calls a specified MonitorEnumProc function once for each display monitor in the calculated enumeration set. The MonitorEnumProc function always receives a handle to the display monitor. 

If the hdc parameter of EnumDisplayMonitors is non-NULL, the MonitorEnumProc function also receives a handle to a device context whose color format is appropriate for the display monitor. You can then paint into the device context in a manner that is optimal for the display monitor.

Requirements 
  Windows NT/2000/XP/Vista: Included in Windows 2000 and later.
  Windows 95/98/Me: Included in Windows 98 and later.
  Header: Declared in Winuser.h; include Windows.h.
--------------------------------
