goto startup
;------------------------ COPYRIGHT STUFF ----------------------------
about:
aboutcopy =
(LTrim
EmoPaC - Emoticon Pack Creator

(partly) Generated by SmartGUI Creator
Created by Drugwash drugwash@gmail.com
April 2008
version 0.0.4.0 alpha
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
This script contains code  by Philippe Lhoste
<PhiLho(a)GMX.net> http://Phi.Lho.free.fr

This script uses the free AniGIF control by akyprian :
 http://www.winasm.net/forum/index.php?showtopic=279

-----------copyright details as found in AniGIF.ahk: -----------
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
AniGIF is a copyright of Antonis Kyprianou.

You can use AniGIF for NON commercial purposes provided you
have the following information on your application's about box:
AniGIF control is copyright of Antonis Kyprianou (http://www.winasm.net)

You need my WRITTEN permission to use AniGIF in commercial applications
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
Control_AniGIF  - AutoHotkey script
by Philippe Lhoste <PhiLho(a)GMX.net> http://Phi.Lho.free.fr

1.03.000 -- 2007/05/17 (PL) -- Total encapsulation.
1.02.000 -- 2007/05/16 (PL) -- Changed functions names (thanks majkinetor),
added more wrappers, freed correctly DLL.
1.01.000 -- 2007/05/16 (PL) -- Update to 1.0.4.0 with WAGM_SETBKCOLOR.
1.00.000 -- 2007/05/16 (PL) -- Creation.

Copyright notice: For details, see the following file:
http://Phi.Lho.free.fr/softwares/PhiLhoSoft/PhiLhoSoftLicence.txt
This program is distributed under the zlib/libpng license.
Copyright (c) 2007 Philippe Lhoste / PhiLhoSoft
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
)
high = 320
Gui, 2:Add, GroupBox, x10 y-14 w380 h%high% AltSubmit,
Gui, 2:Font, S7 CRed norm, Verdana
Gui, 2:Add, Text, x12 y11 w374 Center Hidden vabt1, %aboutcopy%
abt1_TT :=
abtC_TT :=
Gui, 2:Color, FFFFFF
Gui, 2:Show, w400 h300, About EmoPac
Gui +LastFound
GuiControl, 2:Show, abt1
Loop, % high *2.5
	{
	rows := Round(%A_Index%/10) + 1
	vert := high - A_Index
	GuiControl, 2:Move, abt1, y%vert%
	sleep, 120
	}
Gui, 2:Add, Button, x160 y270 w80 h25 vabtC gabtclose, &Close
return

abtclose:
Gui, 2:Font, norm
Gui, 2:Destroy
return
;--------------------- END COPYRIGHT STUFF ---------------------

startup:
#SingleInstance,Force
#NoTrayIcon
HotKey, ^D, debg		; Toggle debug mode
HotKey, ^X, expert		; Toggle expert mode
Hotkey, ^I, tray		; Toggle tray icon
;---------------------------- MAIN ROUTINE ------------------------
debug :=
exp :=
Unicode =
zoom := 1
mode  := 0
inipath := "emopac.ini"
FileRead, init, %inipath%
if ErrorLevel
	{
	MsgBox, 48, Error !, Could not open %inipath%
	init :=
	ExitApp
	}
#Include AniGif.ahk
if Unicode
	{
	color = White
	Gui, Add, Pic, 0x4000000 x0 y0 w600 h595 AltSubmit BackgroundTrans, data/back.png
	}
else
	color = Default
Gui, Font, S10 C%color% bold
;Gui, Add, Text, x80 y0 w286 h17 AltSubmit, Miranda IM Emoticon Pack Creator
Gui, Add, Text, x7 y2 h17 AltSubmit, Miranda IM Emoticon Pack Creator
Gui, Font, S8 norm
;Gui, Add, Text, x115 w215 y18 w160 h13 AltSubmit, for Pescuma's Emoticons plug-in
Gui, Add, Text, x+5 y4 h13 AltSubmit, for Pescuma's Emoticons plug-in
Gui, Font, S6 norm
Gui, Add, Button, 0x8000 0xC00 x+10 y1 w100 h20 Center AltSubmit BackgroundTrans vabt gabout, ©2008 Drugwash
abt_TT := "About EmoPac"
;Gui, Add, Pic, x456 y1 Icon1, EmoPaC.exe
Gui, Add, GroupBox, x7 y22 w310 h80 AltSubmit, Pack data
Gui, Add, Text, xp+9 yp+15 w80 h16 Right AltSubmit, Name :
Gui, Add, Text, xp yp+21 wp hp Right AltSubmit, Author :
Gui, Add, Text, xp yp+21 wp hp Right AltSubmit, Updater URL :
Gui, Add, Edit, x+2 yp-43 w210 hp+1 vpname gvalid AltSubmit
Gui, Add, Edit, xp yp+21 wp hp vpauthor gvalid AltSubmit
Gui, Add, Edit, xp yp+21 wp hp vpupdater gvalid AltSubmit
Gui, Add, GroupBox, x322 y22 w87 h166 AltSubmit, Main
Gui, Add, Button, xp+7 yp+14 wp-13 h39 vtt1 AltSubmit BackgroundTrans, &Load
tt1_TT := "Load an existing .mep file for editing"
Gui, Add, Button, xp yp+41 wp hp vtt2 AltSubmit BackgroundTrans, &Save
tt2_TT := "Save the current session as .mep together with all associated images"
Gui, Add, Checkbox, xp+8 yp+41 w58 h32 vmakeF grefresh AltSubmit, Create folders
makeF_TT := "When enabled, each protocol will have its images in an omonimous separate folder"
Gui, Add, Button, xp-8 yp+42 w74 h20 vtt3 AltSubmit BackgroundTrans, &Clear
tt3_TT := "Erase everything set up in the current session. Does not operate on disk."
Gui, Add, GroupBox, x414 y22 w177 h166, Protocols
Gui, Add, Radio, xp+7 yp+120 w60 h16 AltSubmit gdoAll, all
Gui, Add, Radio, xp yp+21 wp hp Checked vselP AltSubmit gdoSel, select
Gui, Add, TreeView, x+1 yp-131 w104 h150 Checked Sort -HScroll -Lines 0x1000 AltSubmit vProto gdoProto
gosub iniP
Gui, Add, GroupBox, x7 y103 w310 h84, Codes
Gui, Add, Text, xp+9 yp+15 w80 h16 Right AltSubmit, Standard :
Gui, Font, Bold
Gui, Add, Edit, x+2 yp-1 w210 hp+1 ReadOnly vcodes AltSubmit
Gui, Add, Edit, xp yp+21 wp hp Hidden ve2 gvalid AltSubmit
Gui, Add, Text, xp+2 yp+1 wp-4 hp-1 ve11 AltSubmit, %staName%
e11_TT :=
Gui, Font, norm
Gui, Add, Text, xp-84 yp w80 hp Right Hidden ve1 AltSubmit, Custom codes :
e1_TT := "Developer option - allows for editing the current emoticon's codes sequence"
Gui, Add, Button, x+0 y+4 w67 h20 Hidden ve3, &Default
e3_TT := "Revert current emoticon's code sequence to the default one"
Gui, Add, Button, x+5 yp wp hp Hidden ve4, &Undo
e4_TT := "Undo last operation on codes sequence"
Gui, Add, Button, x+5 yp wp hp Hidden ve5, &Merge
e5_TT := "Merge the currently added codes with the already existant sequence"
Gui, Add, GroupBox, x322 y200 w87 h337, Actions
Gui, Add, Button, xp+7 yp+15 w74 h39 Default vtt4, &Folder
tt4_TT := "Add all emoticon images in a folder to the list of usable emoticon images"
Gui, Add, Button, xp yp+40 wp h20 vtt5, Add &image
tt5_TT := "Add single/multiple image(s) to the list of usable emoticon images"
Gui, Add, Button, xp yp+21 wp hp vtt6, &Rem. image
tt6_TT := "Remove an image from the list of usable images (currently not implemented)"
Gui, Add, Button, xp yp+22 w36 hp Hidden ve6, « ±
e6_TT := "Toggle left-hand list between large icon view and report view"
Gui, Add, Button, x367 yp w36 hp Hidden ve7, ± »
e7_TT := "Toggle right-hand listbetween large icon view and report view"
Gui, Add, Button, x329 yp+22 w74 h39 vtt7, &Assign >>
tt7_TT := "Assign the image in the left-hand panel to the selected emoticon label in the right-hand panel"
Gui, Add, Button, xp yp+40 w74 h19 vtt8, &Blank <<
tt8_TT := "Remove the image assigned to the selected label"
;-------- ANIGIF CODE HERE ------------
Gui +LastFound
guiID := WinExist()
Gui, Add, GroupBox, xp yp+15 w74 h50
hAniGif := AniGif_CreateControl(guiID, 330, 384, 72, 38, "center")
If hAniGif is not integer
	MsgBox Error in %hAniGif%
AniGif_SetBkColor(hAniGif, 0xFFFFFF)
;-------- END ANIGIF CODE ------------
Gui Add, Button, xp yp+52 w36 h19 vtt9 gAniGifZ+, ++
tt9_TT := "Zoom in"
Gui Add, Button, x+2 yp wp hp vtt10 gAniGifZ-, - -
tt10_TT := "Zoom out"
Gui, Add, Picture, AltSubmit BackgroundTrans Hidden xp-20 yp-43 h38 w-1 vprev, %debugpath%
Gui, Add, GroupBox, x7 y189 w586 h354 AltSubmit, Emoticon images
Gui, Add, ListView, xp+6 yp+17 w305 h330 -LV0x10 -Multi NoSortHdr -ReadOnly AltSubmit Icon vsrcL gsrcSel, Name|Size(bytes)|Last modified
Control, Disable,, SysListView321
Gui, Add, ListView, xp+401 yp w173 hp -Multi NoSortHdr ReadOnly AltSubmit Icon Sort Hidden vdestL0 gdestSel, Protocol|Common|Codes
Loop, % countP
	{
	temp := A_Index
Gui, Add, ListView, xp yp wp hp -Multi NoSortHdr ReadOnly AltSubmit Icon Sort Hidden vdestL%temp% gdestSel, Protocol|Common|Codes
	}
IconView := true
IconViewL := true
gosub iniD
if not wP
	{
	wP := 1
	last := 1
	oldselP := 1
	selectP := 1
	}
GuiControl, Show, destL1
Gui, Add, StatusBar, -0x800 0x100 vstatbar
statbar_TT :=
SB_SetParts(80, 70, 310, 75, 48)
Gui, Add, Progress, X15 Y545 W300 H11 -Smooth vloader
loader_TT :=
GuiControl, Hide, loader
Gui, Add, Text, x414 y543 w165 h14 Hidden ve8 c%color% Right AltSubmit gopenIni, %inipath%
e8_TT := "Click to edit emopac.ini"
Gui, Add, Text, x15 y543 w295 h14 Hidden ve9 c%color% AltSubmit gopenPath, %fdpath%
e9_TT := "Click to open the folder containing the above emoticon images"
Gui, Add, Text, vdeb1 Hidden AltSubmit BackgroundTrans x16 y522 w300 h14 cRed, AGuiEvent: %A_GuiEvent%, AEventInfo: %A_EventInfo%
;Gui, Add, Pic, 0x4000000 x0 y0 w600 h595 AltSubmit, data/back.png
Gui, Show, x420 y85 w600 h585  AltSubmit, EmoPaC
Gui, +Resize -MaximizeBox +MinSize600x500 +MaxSize600x750
OnMessage(0x200, "tooltip")
refresh:
Gui, Submit, NoHide
Return
;-------------------------- END MAIN ROUTINE ---------------------

;-------- COLOR CALCULATION ---------
calcolor:
wU = 425
hU = 105
color :=
Loop, 10
	{
	hei := A_Index + hU - 1
	Loop, 10
		{
		wid := A_Index + wU - 1
		PixelGetColor, tempcol, wid, hei, RGB
;if debug
;MsgBox, Position is %wid%x%hei%`nColor is %tempcol%
		SetFormat, integer, d
		tempcol += 0
		color += tempcol
		}
	}
color /= 100
color := 16777215 - color
SetFormat, integer, hex
color += 0
SetFormat, integer, d
if debug
	MsgBox, Color is %color%
return
;-------- COLOR CALCULATION ---------

;--------- ANIGIF ZOOM --------
AniGifZ+:
Loop, %debugpath%
	if A_LoopFileExt <> gif
	GuiControl,, prev, *icon1 *w-1 *h38 %debugpath%
	else
		AniGif_Zoom(hAniGif, 1)
GuiControl, Show, prev
return

AniGifZ-:
Loop, %debugpath%
	if A_LoopFileExt <> gif
	GuiControl,, prev, *icon1 *w0 *h0 %debugpath%
	else
		AniGif_Zoom(hAniGif, 0)
GuiControl, Show, prev
return
;--------- ANIGIF ZOOM --------

;---------- TRAY ICON --------
tray:
if not trayI
	Menu, Tray, Icon
else
	Menu, Tray, NoIcon
trayI := not trayI
return
;-------- END TRAY ICON --------

;---------- TOOLTIP DISPLAY ------------
tooltip()
{
static newT, oldT, _TT
newT := A_GuiControl
if (newT <> oldT and not InStr(newT, " "))
	{
	ToolTip
	SetTimer, showT, 1500
	oldT := newT
	}
return

showT:
SetTimer, showT, Off
ToolTip, % %newT%_TT
SetTimer, hideT, 10000
return

hideT:
SetTimer, hideT, Off
ToolTip
return
}
;----------- END TOOLTIP DISPLAY ---------
;------------------------- ERROR MANAGEMENT -------------------
errMgm:
if critical
	{
	MsgBox, 48, Error !, There was a critical error:`n`n%errMsg%`n`n`tProgram will now exit.
gosub clearall
	ExitApp
	}
MsgBox, 48, Error !, %errMsg%
return
;--------------------- END ERROR MANAGEMENT -----------------
;------------------------------ VARIABLES ---------------------------
	colInd :=
	count :=
	countF :=
	countL :=		; number of labels (standard emoticons)
	countP :=	; number of protocols
	critical :=		; switch enabling critical error handling
	custom :=
	debug :=		; switch enabling debugging messages
	debugPath :=
	dragged :=	; full path to the dragged file
	dselItemID :=	; selected item number in the labels list (destination)
	errMsg :=
	exp :=		; switch enabling the use of expert items
	fdpath :=		; current folder path
	fdpathN :=	; newly added folder path
	filepath :=
	fold :=		; protocol subfolder added to pack if makeF enabled
	fpath :=
	gifT :=		; GIF transparency
	IconView :=	; switch toggling icon/report view mode
	indB :=
	inipath :=		; full path to program's ini file (critical!)
	init :=
	labelCount :=
	last :=		; last enabled protocol
	lastP :=		; last selected protocol (stupid TreeView!)
	makeF :=		; switch enabling creation of protocol subfolders
	mT :=
	newIndex :=
	newPos :=
	pathA :=		; full path for multiple selected files
	pathHead :=	; partial path to multiple selected files
	pauthor :=	; pack author's name
	pname :=		; pack name
	pro :=
	Proto :=		; Protocol list variable (unused)
	pStep :=		; progressbar advance step
	pupdater :=	; pack Updater URL
	selItemID :=	; selected item number in the images list (source)
	sourceCount := ; total number of images in the source list
	sT :=		; current file's extension
	temp :=
	tForm :=		; formatted string with 'last modified' time
	tRaw :=		; raw string with 'last modified' time
	wP :=		; currently active protocol (0 of all)
;-------------------------- END VARIABLES ---------------------------

;------------ DEBUG -------------
debg:
if debug
dbg := "OFF"
else
dbg := "ON"
Progress,B2 ZH0 FM18 CTFF00FF CW0,,Debug mode %dbg%,,Tahoma
debug := not debug
Sleep 2000
Progress,Off
Gui, Submit, NoHide
return
;--------- END DEBUG ----------

;------------ EXPERT -------------
expert:
if exp
	{
	expT := "OFF"
	expV := "Hide"
	}
else
	{
	expT := "ON"
	expV := "Show"
	}
Progress,B2 ZH0 FM18 CTFF00FF y300 CW0,,Expert mode %expT%,,Tahoma
exp := not exp
gosub calcolor
Loop, 10
	GuiControl, %expV%, e%A_Index%
Sleep 2000
Progress,Off
Gui, Submit, NoHide
return
;--------- END EXPERT ----------

;-------- STATUSBAR ----------
sb:
if selItemID
	{
	SB_SetText("Image " . selItemID . "/" . sourceCount, 1)
	SB_SetText(size%selItemID% . " bytes", 2)
	SB_SetText(path%selItemID%, 3)
	}
SB_SetText("Label " . dselItemID . "/" . countL%wP%, 4)
SB_SetText("Proto:"countPR, 5)
Gui, Submit, NoHide
return
;-------- STATUSBAR ----------

;--------------------------- RADIO BUTTONS -----------------------
doAll:
Loop % countP
	{
	GuiControl, Hide, destL%A_Index%
	TV_Modify(Pr%A_Index%, "Check -Bold")
	}
GuiControl, Show, destL0
TV_Modify(Pr1, "VisFirst")
Control, Disable,, SysTreeView321
TV_Modify(Pr1, "-VisFirst")
return

doSel:
GuiControl, Hide, destL0
Loop % countP
	{
	GuiControl, Hide, destL%A_Index%
	TV_Modify(Pr%A_Index%, "-Check")
	}
GuiControl, Show, destL%wP%
Control, Enable,, SysTreeView321
TV_Modify(Pr%last%, "Check Select Bold VisFirst")
wP := last
TV_Modify(Pr%last%, "-VisFirst")
return

doProto:
if A_GuiEvent NOT IN Normal,K
	return
selected := TV_GetSelection()
selected := posP%selected%
wP = 0
Loop
	{
	wP := TV_GetNext(wP,"Check")
	wP%A_Index% := posP%wP%
	if not wP
		break
	}
if debug
	MsgBox, Previously enabled item is #%last%`nPreviously selected item is #%oldselP%`n`nCurrently enabled item is #%wP%`nCurrently selected item is#%selected%`n`nwP1=%wP1%`nwP2=%wP2%`nwP3=%wP3%
oldselP := selected
TV_Modify(Pr%selected%, "-Select -Bold")
if not wP1
	wP1 := last
if not wP2
	wP2 := selected
TV_Modify(Pr%last%, "-Check -Select -Bold")
	if wP1 = %last%
		{
		wP3 := wP1
		wP1 := wP2
		wP2 := wP3
		}
wP := wP1
TV_Modify(Pr%wP%, "Check Select Bold")
if debug
	MsgBox, wP1=%wP1%`nwP2=%wP2%`nwP3=%wP3%
if wp <> %last%
	{
	GuiControl, Hide, destL%last%
	GuiControl, Show, destL%wP%
	Gui, ListView, destL
	dselItemId := LV_GetNext()
	}
oldselP := selected
last := wP
wP2 :=
wP3 :=
goto sb
return
;--------------------------- RADIO BUTTONS -----------------------

;--------------------------- VALIDATE INPUT -----------------------
valid:
Gui, Submit, NoHide
return
;------------------------ END VALIDATE INPUT ---------------------

;------------------- INITIALIZE PROTOCOLS LIST ---------------
iniP:
;----- parsing loop------------
Loop, 99	; assumingly there will never be more than 99 supported protocols :-)
	{
	IniRead, protoL, %inipath%, Protocols, %A_Index%, %A_Space%
	if protoL =
		break
	countP := A_Index
	if protoL = Default
		{
		Pr%A_Index% := TV_Add(protoL, 0, "Check Bold")
		last := 1
		}
	else
		Pr%A_Index% := TV_Add(protoL)
	temp := Pr%A_Index%
	posP%temp% := A_Index
if debug
	MsgBox, % "posP=" . posP%temp%
	}
goto sb
return
;---------------- END INITIALIZE PROTOCOLS LIST -------------

;------------------- INITIALIZE DESTINATION LISTS ---------------
iniD:
gosub initF
Loop, %countP%
	{
	temp := A_Index
	Gui, ListView, destL%temp%
	GuiControl, -Redraw, destL%temp%
;----- parsing loop------------
	Loop, 999	; assumingly there will never be more than 999 supported definitions for a single protocol. :-)
		{
		IniRead, action, %inipath%, Def%temp%, %A_Index%, %A_Space%
		if action =
			break
		countL%temp% := A_Index
		StringReplace, action1, action, "`,%A_Space%", ¶, 1
		Loop, parse, action1, ¶
			act%A_Index% := A_LoopField
		LV_Add(Icon1, act2, act1, act3)
		}
	if not countL%temp%
		TV_Delete(Pr%temp%)
	GuiControl, +Redraw, destL%temp%
	}
countPR := TV_GetCount()
Gui, ListView, destL0
Loop, 20
	LV_Add(Icon1, "common", "N/A", "N/A")
countL0 := 20
attr :=
return
;---------------- END INITIALIZE DESTINATION LISTS -------------

;------------------- INITIALIZE FIRST ICON ---------------------
initF:
srcID := IL_Create(1, 5, 0)	; small image list
srcIDL := IL_Create(1, 5, 1)
Gui, ListView, srcL
;LV_SetImageList(srcIDL, 1)
LV_SetImageList(srcID, 1)	; small image list assigned
LV_SetImageList(srcIDL, 0)
Loop, % countP + 1
	{
	Proto := A_Index -1
	Gui, ListView, destL%Proto%
;	LV_SetImageList(srcIDL, 1)
	LV_SetImageList(srcID, 1)	; small image list assigned
	LV_SetImageList(srcIDL, 0)
	}
IL_Add(srcID, "data/noimg.ico", 0xFFFFFF, 1)	; was disabled for big icons
IL_Add(srcIDL, "data/noimg.ico", 0xFFFFFF, 1)
return
;------------------- INITIALIZE FIRST ICON ---------------------

;------------------------ ADD FOLDER ----------------------------
ButtonFolder:
FileSelectFolder, fdpathN, *%fdpathO%, 2, Please select images folder
if fdpathN =
	{
	if fdpath = AND sourceCount=
		MsgBox, 64, Information, No folder has been selected.`nPlease select a folder containing emoticon images.
	return
	}
else
goto loaded

loaded:
	fdpath := fdpathN
	fdpathO := fdpath
	Gui, ListView, srcL
	Loop, %fdpath%\*.*
		countF += 1	; keeps score of current folder contents
	GuiControl, -Redraw, srcL
	GuiControl, Show, loader
	Loop, %fdpath%\*.*
		{
		if A_LoopFileExt NOT IN bmp,emf,exif,gif,ico,jpg,jpeg,png,tif,tga,wmf
			continue
		sourceCount += 1
		sT := A_LoopFileExt
		gosub selTrans
		path%sourceCount% := A_LoopFileFullPath
;		name%sourceCount% := A_LoopFileName
		size%sourceCount% := A_LoopFileSize
		IL_Add(srcID, A_LoopFileFullPath, mT, 1)	; was disabled for big icons
		IL_Add(srcIDL, A_LoopFileFullPath, mT, 1)
		gosub formTime
		newIndex := sourceCount + 1
		LV_Add("Icon" . newIndex, A_LoopFileName, A_LoopFileSize, tForm)
		pStep := (A_Index * 100) // countF
		GuiControl,, loader, %pStep%
		}
	GuiControl, +Redraw, srcL
	GuiControl, Hide, loader
	Control, Enable,, SysListView321
	;LV_ModifyCol(1, "AutoHdr CaseLocale")
	LV_ModifyCol(1, "AutoHdr Logical")
	LV_ModifyCol(2, "AutoHdr Integer")
	LV_ModifyCol(3, "AutoHdr")
	GuiControl, +default, Save
GuiControl,, e9, %fdpath%
if ErrorLevel
	MsgBox, e9=%e9%`nfdpath=%fdpath%
goto sb
return
;------------------------- END ADD FOLDER ----------------------

;---------------------- SELECT TRANSPARENCY ----------------
selTrans:
SetFormat, integer, H
if (sT = "bmp")
	mT := 0xFF00FF
else if (sT = "gif")
	{
	debugPath := A_LoopFileFullPath
;mT := FFFFFF
	gosub calcMask
	}
else if (sT = "ico" OR sT = "jpg" OR sT = "jpeg" OR sT = "png" OR sT = "tif")
	mT := 0x000000
SetFormat, integer, D
return

calcMask:
FileRead, gifT, *m0x30D %debugPath%
colInd := *(&gifT + 0x0B)
indB :=  colInd * 3 + 0x0D
mT := *(&gifT + indB) * 0x010000 + *(&gifT + indB +1) * 0x100 + *(&gifT + indB + 2)
gifT :=
return
;---------------------- SELECT TRANSPARENCY ----------------

;-------------- FORMAT TIME MODIFIED -----------------
formTime:
tRaw := A_LoopFileTimeModified
formT1:
tForm := Substr(tRaw, 7,2) . "." . Substr(tRaw, 5,2) . "." . Substr(tRaw, 1,4) . ", " . Substr(tRaw, 9,2) . ":" . Substr(tRaw, 11,2)
return
;---------- END FORMAT TIME MODIFIED -----------------

;---------------------------- ADD IMAGE ----------------------------
ButtonAddimage:
Gui, ListView, srcL
FileSelectFile, fpath, M27,, Select image files to add to the pack, Images (*.ico; *.bmp; *.gif; *.jpg; *.png; *.tiff) 
/*
	{
	errMsg := "No file(s) selected"
	goto errMgm
	}
*/
if ErrorLevel
	return
Loop, parse, fpath, `n
	{
	if A_Index = 1
		pathHead := A_LoopField
	else
		{
		sourceCount += 1
		path%sourceCount% := pathHead . "\" . A_LoopField
		gosub extract
		}
	}
Control, Enable,, SysListView321
goto sb
return

extract:
		pathA := path%sourceCount%
		if debug
			MsgBox, LoopField = %A_LoopField%`nPath = %pathA%
		Loop, %pathA%
			{
			sT := A_LoopFileExt
			gosub selTrans
			IL_Add(srcID, A_LoopFileFullPath, mT, 1)	; was disabled for big icons
			IL_Add(srcIDL, A_LoopFileFullPath, mT, 1)
			size%sourceCount% := A_LoopFileSize
;			name%sourceCount% := A_LoopFileName
			gosub formTime
			newIndex := sourceCount + 1
			LV_Add("Icon" . newIndex, A_LoopFileName, A_LoopFileSize, tForm)
			if debug
				MsgBox, File #%sourceCount%: %A_LoopFileFullPath%`nsize: %A_LoopFileSize% bytes`ntime: %tRaw%
			}
return
;--------------------------- END ADD IMAGE --------------------------

;--------------------------- SOURCE SELECTED -------------------------
srcSel:
Critical
if A_GuiControl <> srcL
	return
if A_GuiEvent NOT IN Normal,I,D,d,A
	return
If debug
	{
	GuiControl,, deb1, AGuiEvent is %A_GuiEvent%`nAEventInfo is %A_EventInfo%
	GuiControl, Show, deb1
	}
Gui, ListView, srcL
selItemID := A_EventInfo
if (selItemID = lselItemID)
	return
dragSel:
if selItemID = 0
	{
	selItemID :=
	return
	}
if A_GuiEvent IN D,d
	{
	LV_GetText(dragged, selItemID, 1)
	return
	}
LV_GetText(selItem, selItemID)
gosub sb
debugPath := path%selItemID%
SetFormat, integer, H
gosub calcMask
gifT :=
SetFormat, integer, D
if debug
	{
	Gui, Add, Text, x329 y493 w70 h14 c%color% AltSubmit, Index: %colInd%
	Gui, Add, Text, xp yp+14 wp hp c%color% AltSubmit, Addr: %indB%
	Gui, Add, Text, xp yp+14 wp hp c%color% AltSubmit, Mask: %mT%
	}
		GuiControl, Disable, prev
		AniGif_UnloadGif(hAniGif)
		SendMessage 2026, 0, 0, , ahk_id %hAniGif%
Loop, %debugpath%
	{
	if A_LoopFileExt = gif
		{
		AniGif_LoadGifFromFile(hAniGif, debugpath)
;		GuiControl, Enable, tt9
;		GuiControl, Enable, tt10
		}
	else
		{
		GuiControl,, prev, %debugpath%
		GuiControl, Show, prev
;		GuiControl, Disable, tt9
;		GuiControl, Disable, tt10
		}
	}
lselItemID := selItemID
Gui, ListView, srcL
return
;------------------------- END SOURCE SELECTED ----------------------

;------------------------ DESTINATION SELECTED ----------------------
destsel:
Gui, ListView, destL%wP%
if A_GuiEvent <> Normal
	return
dselItemID := A_EventInfo
if dselItemID = 0
	{
	dselItemID :=
	return
	}
LV_GetText(Scodes, dselItemID, 3)
GuiControl,, codes, %Scodes%
LV_GetText(staName, dselItemID, 2)
GuiControl,, e11, %staName%
goto sb
return
;----------------------END DESTINATION SELECTED -------------------

;------------------------------ ASSIGN FILE ------------------------------
ButtonAssign>>:
if not dselItemID
	{
	MsgBox, 48, Error !, You have not selected a destination label.
	return
	}
if not selItemID
	{
	MsgBox, 48, Error !, Please select an image in the left-hand list.
	return
	}
fullP := path%selItemID%
newPos := selItemID + 1
if selP = 1
	{
	Loop, %countP%
		{
		if not countL%A_Index%
			continue
		label%A_Index%x%dselItemID% := fullP
		Gui, ListView, destL%A_Index%
		LV_Modify(dselItemID, "Icon" . newPos)
		assigned%A_Index% += 1
		}
	}
else
	{
	label%last%x%dselItemID% := fullP
	Gui, ListView, destL%wP%
	LV_Modify(dselItemID, "Icon" . newPos)
	assigned%last% += 1
	}
Gui, Submit, NoHide
if debug
	{
	temp := label%last%x%dselItemID%
	MsgBox, 0, Debug, Image #%selItemID% has been assigned to %dselItemID%`nlabel%last%x%dselItemID% = %fullP%`n%temp%
	}
return
;---------------------------- END ASSIGN FILE --------------------------

;------------------------------ DRAG'N'DROP ---------------------------
GuiDropFiles:
if A_GuiControl <> destL%wP%
	return
if NOT dragged
	dragged := A_GuiEvent
if dselItemID =
	{
	MsgBox, 48, Error !, You have not selected a destination label.
	return
	}
if debug
	MsgBox, 0, Debug, A_GuiControl is %A_GuiControl%`ndselItemID is %dselItemID%
if ErrorLevel > 1
	{
	MsgBox, 48, Error !, You cannot assign more than one image to an emoticon label!
	return
	}
Gui, ListView, srcL
fpath := dragged
sourceCount += 1
path%sourceCount% := fpath
gosub extract
selItemID := sourceCount
gosub dragSel
LV_Modify(sourceCount, "Select")
goto ButtonAssign>>
return
;---------------------------- END DRAG'N'DROP ---------------------------

;----------------------------- CLEAR ALL DATA -----------------------
ButtonClear:
gosub clearall
AniGif_SetBkColor(hAniGif, 0xFFFFFF)
gosub iniD
Gui, Submit, NoHide
return

clearall:
MsgBox, 36, Warning..., Are you sure you want to delete all data for the current session?`n`tThere is no 'Undo' for this operation...`n`n`t`tProceed?
IfMsgBox, No
	return
GuiControl,, pname
GuiControl,, pauthor
GuiControl,, pupdater
GuiControl,, custom
GuiControl,, codes
GuiControl,, valid
GuiControl,, prev
GuiControl,, e11
last := 1
dselItemID :=
selItemID :=
filepath :=
lastpath :=
sourceCount :=
Loop, %countP%
	{
	temp := A_Index
	Gui, ListView, destL%A_Index%
	Loop % LV_GetCount()
		label%temp%x%A_Index% :=
	LV_Delete()
	assigned%A_Index% :=
	}
Loop, %sourceCount%
	size%A_Index% :=
Gui, ListView, srcL
LV_Delete()
IL_Destroy(srcID)
IL_Destroy(srcIDL)
return
;--------------------------- END CLEAR ALL DATA ------------------

;------------------------------ SWITCH VIEW ------------------------
;------ LEFT -------
Button«±:
if NOT sourceCount
	return
mode += 1
if mode = 4
	mode := 0
Gui, ListView, srcL
if mode = 0
	{
	GuiControl, +Icon, srcL
	LV_ModifyCol(1, "AutoHdr Logical")
	}
else if mode = 1
	{
	GuiControl, +IconSmall, srcL
	LV_ModifyCol(1, 70)
	}
else if mode = 2
	GuiControl, +List, srcL
else if mode = 3
	{
    GuiControl, +Report, srcL
	LV_ModifyCol(1, "AutoHdr Logical")
	LV_ModifyCol(2, "AutoHdr Integer")
	LV_ModifyCol(3, "AutoHdr")
	}
return
;----- RIGHT ------
Button±»:
if NOT countL%wP%
	return
Gui, ListView, destL%wP%
if NOT IconViewL
    GuiControl, +Icon, destL%wP%
else
    GuiControl, +Report, destL%wP%
;LV_ModifyCol(1, "AutoHdr CaseLocale")
LV_ModifyCol(1, "AutoHdr Logical")
LV_ModifyCol(2, "AutoHdr Logical")
LV_ModifyCol(3, "AutoHdr Logical")
IconViewL := not IconViewL
return
;--------------------------- END SWITCH VIEW ------------------------

;------------------------------- OPEN PATH ---------------------------------
openPath:
Run Explorer.exe %fdpath%
return
;----------------------------- END OPEN PATH ----------------------------

;--------------------------- OPEN INIFILE PATH --------------------------
openIni:
Run Notepad.exe %inipath%
return
;------------------------- END OPEN INIFILE PATH ----------------------

;---------------------------- LOAD & PARSE PACK -----------------------
ButtonLoad:
MsgBox, Not yet fully implemented.
FileSelectFolder, loadpath,, 3, Please select the folder containing the emoticon pack you wish to edit:
if ErrorLevel
	return
Loop, %loadpath%, 2
	fpath := A_LoopFileName
loadmep := loadpath . "\" . fpath . ".mep"
;StringRight, check, loadmep, 4
if debug
	MsgBox, Folder name is %fpath%`nPack path is %loadmep%
ifnotexist %loadmep%
	{
	MsgBox, 48, Error !, The chosen path does not contain a valid emoticon pack!
	return
	}
;check :=
if debug
	MsgBox, Pack path is %loadmep%
Loop, Read, %loadmep%
	{
	if A_Index = 1
		StringTrimLeft, pname1, A_LoopReadLine, 6
	if A_Index = 2
		StringTrimLeft, pauthor1, A_LoopReadLine, 9
	if A_Index = 3
		StringTrimLeft, pupdater1, A_LoopReadLine, 13
	if A_Index = 4
		break
	}
if debug
	MsgBox, pname1: %pname1%`npauthor1: %pauthor1%`npupdater1: %pupdater1%
GuiControl,, pname, %pname1%
GuiControl,, pauthor, %pauthor1%
GuiControl,, pupdater, %pupdater1%
Gui, Submit, NoHide
fdpathN := loadpath
goto loaded
return
;------------------------- END LOAD & PARSE PACK --------------------

;-------------------------------- SAVE PACK -------------------------------
ButtonSave:
if NOT pname
	{
	MsgBox, 48, Error !, You have not given a name to the emoticon pack!
	return
	}
if NOT pauthor
	{
	MsgBox, 68, Warning..., There is no author name for the pack.`nDo you want to remain anonymous? `;-)
	ifMsgBox, No
		return
	pauthor := "Anonymous by own will :-)"
	}
FileSelectFolder, filepath, *%lastpath%, 0, Please select or create a folder to save the pack to:
if NOT filepath
	{
;	MsgBox, 48, Error !, You have not selected a path to save the emoticon pack!
	return
	}
lastpath := filepath
filepath := filepath . "\" . pname
filename := filepath . "\" . pname . ".mep"
IfExist, %filename%
	{
	MsgBox, 8257, Attention !, Files already exist. Do you want to overwrite them?
	IfMsgBox, Cancel
		return
	FileDelete, %filename%
	If ErrorLevel
		{
		MsgBox, 64, Error !, There was an error deleting the file %filename%
		return
		}
	}
IfNotExist %filepath%
	FileCreateDir, %filepath%
If ErrorLevel
	{
	MsgBox, 64, Error !, Could not create folder %filepath%
	return
	}
FileAppend, Name: %pname%`n, %filename%
FileAppend, Creator: %pauthor%`n, %filename%
FileAppend, Updater URL: %pupdater%`n, %filename%
if ErrorLevel
	{
	MsgBox, 64, Error !, There was an error writing to`n%filename%
	return
	}
;------------------------ END SAVE SIGNATURE FILE -------------------
currP :=
Loop, %countP%
	{
	fold :=
	fold1 := filepath
	writeP := A_Index
	Gui, ListView, destL%writeP%
	if debug
		MsgBox, % "countLwriteP=". countL%writeP% . "`nassignedwriteP=" . assigned%writeP%
	if not countL%writeP%
		continue
	if not assigned%writeP%
		continue
	TV_GetText(pro, Pr%writeP%)
	if exp
		{
		filename1 := filepath . "\" . pro . ".emo"
		FileDelete, %filename1%
		FileAppend, # %pname% by %pauthor%`n`n, %filename1%
		}
	FileAppend, `n# %pro% emoticons`n`n, %filename%
	if debug
		MsgBox, Folders option is %makeF%
	if makeF
		{
		fold := pro . "\"
		fold1 := filepath . "\" . pro
		IfNotExist %fold1%
			FileCreateDir, %fold1%
		}
	count := countL%writeP%
	Loop, %count%
		{
		tempL := label%writeP%x%A_Index%
		if debug
			MsgBox, Protocol %writeP%`nLabel %A_Index%`ntempL=%tempL%
		if NOT tempL
			continue
		Loop, %tempL%
			name := A_LoopFileName
		LV_GetText(tempS, A_Index, 2)
		if exp
			{
			LV_GetText(friendly,A_Index,1)
			LV_GetText(emocodes,A_Index,3)
			StringReplace, emocodes, emocodes, %A_Space%, "%A_Space%", 1
			emodata :=  """" . tempS . """ = " . """" . friendly . """`, """ . emocodes . """"
			if debug
				MsgBox, %emodata%
			FileAppend, %emodata%`n, %filename1%
			}
		temp := """" . pro . "\" . tempS . """ = " . """" . fold . name . """"
		FileCopy, %tempL%, %fold1%
		FileAppend, %temp%`n, %filename%
		}
	}
return
;-------------------------------- SAVE PACK -------------------------------

GuiClose:
AniGif_DestroyControl(hAniGif)
ExitApp
